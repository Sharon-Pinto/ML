#Implement Linear Regression
# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load diabetes dataset from scikit-learn
from sklearn.datasets import load_diabetes
diabetes = load_diabetes()

# Convert dataset to pandas dataframe
df = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
df['target'] = diabetes.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[diabetes.feature_names], df['target'], test_size=0.2, random_state=0)
# Create a linear regression object
lr = LinearRegression()
# Train the model using the training sets
lr.fit(X_train, y_train)
 
# Make predictions using the testing set
y_pred = lr.predict(X_test)

# Calculate mean squared error to evaluate model accuracy
mse = mean_squared_error(y_test, y_pred)
print('Mean squared error:', mse)
# Print regression coefficients and intercept
print('Regression Coefficients:', lr.coef_)
print('Intercept:', lr.intercept_)

# Print variance
print('Variance:', lr.score(X_test, y_test))
 
# Plot the predicted values against the true values
plt.scatter(y_test, y_pred)
plt.xlabel('True values')
plt.ylabel('Predicted values')

# Plot the regression line
x_line = np.linspace(min(y_test), max(y_test), 100)
y_line = x_line
plt.plot(x_line, y_line, color='red')

plt.show()
